# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]

jobs:
  ci:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: zxcasd
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [15.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
      env:
        HOST: localhost
    - run: npm i
    - run: npm run build
    - run: npm run typeorm migration:run
    - run: npm run seed:run
    - run: npm test
    -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: robbyawaldi/example-ci-cd:latest
    - 
        name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: 103.173.75.39
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "dist"
          target: "~/test-app/dist"
    -   name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist-folder
          path: |
            dist
          
  cd:
    
    needs: [ci]
    
    runs-on: ubuntu-latest
    
    steps:
    -
        name: VPS - pull image and run app container
        uses: appleboy/ssh-action@master
        with: 
          host: 103.173.75.39
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
             docker pull robbyawaldi/example-ci-cd:latest
             docker rm -f postgres example-ci-cd
             docker run -p 5432:5432 --restart always --network cicd-net --network-alias=db --name postgres -v pg_data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=zxcasd -d postgres
             docker run -d -p 8081:8082 --restart always --network cicd-net --network-alias=nodejs -e HOST=db --name example-ci-cd robbyawaldi/example-ci-cd:latest
             docker exec -i example-ci-cd yarn typeorm migration:run
             docker exec -i example-ci-cd yarn seed:run           
